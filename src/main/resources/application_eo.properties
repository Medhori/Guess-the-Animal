

# Ask for a favourite animal
ask.favorite.animal=\
Mi volas lerni pri bestoj.\n\
Kiun beston vi plej ŝatas?

think=Vi pensu pri besto, kaj mi divenos ĝin.
enter=Premu enen kiam vi pretas.
give.up=Mi rezignas. Kiun beston vi havas en la kapo?
specify.fact=Indiku fakton, kiu distingas {0} de {1}:
is.correct=Ĉu la aserto ĝustas por la {0}?
choice=Via elekto:
error=Bonvolu enigi la numeron de 0 ĝis {0}
learned=Mi lernis la jenajn faktojn pri bestoj:
distinguish=Mi povas distingi ĉi tiujn bestojn per la demando:

thanks=\
    Tio estis amuza! \f\
    Estis agrable ludi kun vi! \f\
    Dankon pro ludado! \f\
    Dankon! Mi tro amuziĝis!




again=\
    Ĉu vi volas provi denove?\f\
    Ĉu vi ŝatas ludi denove?\f\
    Ĉu vi volas ripeti?\f\
    Ĉu vi volas ludi denove?\f\
    Ankoraŭ unu ludo?\f\
    Ĉu vi volas ludi denove?

list.animals=Jen la bestoj, kiujn mi konas:

# Search animal
search.animal   =Enigu la nomon de besto:
search.facts    =Faktoj pri la {0}:
search.not_found=La besto ne estas en mia sciarbo.


# The Knowledge Tree Statistics
# The messages formatted for printf function

title       =La statistiko de la Scio-Arbo
root        =- radika nodo
nodes       =- tuta nombro de nodoj
animals     =- totala nombro de bestoj
statements  =- totala nombro de deklaroj
height      =- alteco de la arbo
minimum     =- minimuma profundo
average     =- averaĝa profundo


# Ask user for a closed (Yes/No) question

pattern.yes=(j|jes|certe)!?

pattern.no=(n|ne)!?

ask.again=Bonvolu enigi jes aŭ ne.\f\
Amuza, mi ankoraŭ ne komprenas, ĉu jes aŭ ne?\f\
Pardonu, ĝi devas esti jes aŭ ne.\f\
Ni provu denove: ĉu jes aŭ ne?\f\
Pardonu, ĉu mi rajtas demandi vin denove: ĉu ĝi estis jes aŭ ne?


